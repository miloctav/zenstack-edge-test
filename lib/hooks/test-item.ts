/******************************************************************************
* This file was generated by ZenStack CLI 2.9.4.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TestItem } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateTestItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(TestItem | undefined), DefaultError, Prisma.TestItemCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(TestItem | undefined), DefaultError, Prisma.TestItemCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TestItemCreateArgs, DefaultError, TestItem, true>('TestItem', 'POST', `${endpoint}/testItem/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TestItemCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TestItemCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TestItemCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TestItemCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTestItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TestItemCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TestItemCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TestItemCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TestItem', 'POST', `${endpoint}/testItem/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TestItemCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TestItemCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TestItemCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TestItemCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTestItem<TArgs extends Prisma.TestItemFindManyArgs, TQueryFnData = Array<Prisma.TestItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.TestItemFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.TestItemFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TestItem', `${endpoint}/testItem/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTestItem<TArgs extends Prisma.TestItemFindManyArgs, TQueryFnData = Array<Prisma.TestItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.TestItemFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.TestItemFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TestItem', `${endpoint}/testItem/findMany`, args, options, fetch);
}

export function useFindUniqueTestItem<TArgs extends Prisma.TestItemFindUniqueArgs, TQueryFnData = Prisma.TestItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.TestItemFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.TestItemFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TestItem', `${endpoint}/testItem/findUnique`, args, options, fetch);
}

export function useFindFirstTestItem<TArgs extends Prisma.TestItemFindFirstArgs, TQueryFnData = Prisma.TestItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.TestItemFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.TestItemFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TestItem', `${endpoint}/testItem/findFirst`, args, options, fetch);
}

export function useUpdateTestItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(TestItem | undefined), DefaultError, Prisma.TestItemUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(TestItem | undefined), DefaultError, Prisma.TestItemUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TestItemUpdateArgs, DefaultError, TestItem, true>('TestItem', 'PUT', `${endpoint}/testItem/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TestItemUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TestItemUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TestItemUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TestItemUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTestItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TestItemUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TestItemUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TestItemUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TestItem', 'PUT', `${endpoint}/testItem/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TestItemUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TestItemUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TestItemUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TestItemUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTestItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(TestItem | undefined), DefaultError, Prisma.TestItemUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(TestItem | undefined), DefaultError, Prisma.TestItemUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TestItemUpsertArgs, DefaultError, TestItem, true>('TestItem', 'POST', `${endpoint}/testItem/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TestItemUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TestItemUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TestItemUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TestItemUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTestItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(TestItem | undefined), DefaultError, Prisma.TestItemDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(TestItem | undefined), DefaultError, Prisma.TestItemDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TestItemDeleteArgs, DefaultError, TestItem, true>('TestItem', 'DELETE', `${endpoint}/testItem/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TestItemDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TestItemDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TestItemDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TestItemDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TestItem, Prisma.TestItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTestItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TestItemDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TestItemDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TestItemDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TestItem', 'DELETE', `${endpoint}/testItem/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TestItemDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TestItemDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TestItemDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TestItemDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTestItem<TArgs extends Prisma.TestItemAggregateArgs, TQueryFnData = Prisma.GetTestItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.TestItemAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.TestItemAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TestItem', `${endpoint}/testItem/aggregate`, args, options, fetch);
}

export function useGroupByTestItem<TArgs extends Prisma.TestItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TestItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.TestItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TestItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TestItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TestItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TestItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TestItemGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TestItemGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TestItem', `${endpoint}/testItem/groupBy`, args, options, fetch);
}

export function useCountTestItem<TArgs extends Prisma.TestItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TestItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.TestItemCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.TestItemCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TestItem', `${endpoint}/testItem/count`, args, options, fetch);
}

export function useCheckTestItem<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: number; name?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TestItem', `${endpoint}/testItem/check`, args, options, fetch);
}
